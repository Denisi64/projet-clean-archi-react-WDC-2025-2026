#!/usr/bin/env bash
set -euo pipefail

usage() {
  echo "Usage: $0 nest pg"
  exit 1
}

root_guard() {
  [[ -f "pnpm-workspace.yaml" || -f "package.json" ]] || {
    echo "⚠️  Lance ce script depuis la racine du repo." >&2
    exit 1
  }
}

ensure_web_env() {
  local web_env="apps/web-next/.env.local"
  mkdir -p "$(dirname "$web_env")"
  touch "$web_env"
  # retire toute variable DB côté front pour le mode proxy
  grep -vE '^(DATABASE_URL|PRISMA_).*' "$web_env" > "$web_env.tmp" || true
  {
    echo "BACKEND_TARGET=nest"
    echo "NEST_API_URL=http://localhost:3001"
    echo "PORT=3000"
  } >> "$web_env.tmp"
  mv "$web_env.tmp" "$web_env"
}

up_postgres_only() {
  # Démarre UNIQUEMENT Postgres
  if docker compose ls >/dev/null 2>&1; then
    # tente avec service explicite
    docker compose up -d postgres
  else
    docker-compose up -d postgres
  fi
  docker compose ps
}

prisma_generate_and_migrate() {
  export DATABASE_URL="${DATABASE_URL:-postgresql://user:pass@localhost:5432/bank?schema=public}"
  echo "→ Prisma generate + migrate (DATABASE_URL=$DATABASE_URL)"
  pnpm prisma generate
  pnpm prisma migrate deploy || pnpm prisma migrate dev
}

pm2_restart() {
  pnpm -w pm2 delete all || true
  # --update-env pour pousser l'env courante (DATABASE_URL…)
  pnpm -w pm2 start ecosystem.config.cjs --only api,web --update-env
  pnpm -w pm2 status
}

retry_http() {
  local url="$1"
  local tries="${2:-30}"
  local delay="${3:-0.5}"
  local i=0
  while (( i < tries )); do
    if curl -fsS "$url" >/dev/null 2>&1; then
      return 0
    fi
    sleep "$delay"
    ((i++))
  done
  return 1
}

health_checks() {
  echo "→ Attente API (http://localhost:3001/health/db)"
  if retry_http "http://localhost:3001/health/db" 40 0.5; then
    curl -fsS http://localhost:3001/health/db | jq .
  else
    echo "❌ API KO après attente" >&2
    pnpm -w pm2 logs api --lines 200 || true
  fi

  echo "→ Attente WEB (http://localhost:3000/api/health)"
  if retry_http "http://localhost:3000/api/health" 40 0.5; then
    curl -fsS http://localhost:3000/api/health | jq .
  else
    echo "❌ WEB KO après attente" >&2
    pnpm -w pm2 logs web --lines 200 || true
  fi
}

case "${1:-} ${2:-}" in
  "nest pg")
    root_guard
    up_postgres_only
    prisma_generate_and_migrate
    ensure_web_env
    pm2_restart
    health_checks
    ;;
  *)
    usage
    ;;
esac
